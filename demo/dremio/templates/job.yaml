apiVersion: batch/v1
kind: Job
metadata:
  name: my-job
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: my-container
        image: dataopennesscommunity/demo-golden:latest

        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "start"


          # Number of times to check the website
          iterations=999

          # Delay between each check (in seconds)
          delay=10

          # Loop for the specified number of iterations
          for i in $(seq 1 $iterations)
          do
              # Perform the curl request and store the response
              response=$(curl -s -w '%{http_code}\n' '{{$.Values.dremioUrl}}:{{$.Values.coordinator.web.port}}/apiv2/login')

              # Check the response code
              if [ "$response" -eq 401 ]; then
                  echo "Website is accessible "
                  response1=$(curl -X POST -H 'Content-Type: application/json' -d '{"userName":"{{$.Values.userName}}","password":"{{$.Values.password}}"}' '{{$.Values.dremioUrl}}:{{$.Values.coordinator.web.port}}/apiv2/login')
                  echo $response1
                  token=$(echo "$response1" | grep -oP '(?<="token":")[^"]+')
                  echo $token
                  url2='{{$.Values.dremioUrl}}:{{$.Values.coordinator.web.port}}/api/v3/catalog'
                  echo $url2
                  payload='{
                    "entityType": "{{ $.Values.ObjectStorage.S3.entityType }}",
                    "config": {
                      "accessKey": "{{ $.Values.ObjectStorage.S3.config.accessKey }}",
                      "accessSecret": "{{ $.Values.ObjectStorage.S3.config.accessSecret }}",
                      "secure": false,
                      "enableAsync": true,
                      "compatibilityMode": true,
                      "isCachingEnabled": true,
                      "maxCacheSpacePct": "100",
                      "requesterPays": false,
                      "enableFileStatusCheck": true,
                      "defaultCtasFormat": "ICEBERG",
                      "isPartitionInferenceEnabled": false,
                      "whitelistedBuckets": ["{{ $.Values.ObjectStorage.S3.config.whitelistedBuckets }}"],
                      "propertyList": [
                          { "name": "fs.s3a.endpoint", "value": "{{ $.Values.ObjectStorage.S3.config.propertyList.endpoint }}" },
                          { "name": "fs.s3a.path.style.access", "value": true },
                          { "name": "dremio.s3.compat", "value": true },
                          { "name": "fs.s3a.connection.ssl.enabled", "value": false }
                      ],
                      "rootPath": "{{ $.Values.ObjectStorage.S3.config.rootPath }}"
                    },
                    "type": "S3",
                    "name": "{{ $.Values.ObjectStorage.S3.name }}",
                    "metadataPolicy":{
                      "authTTLMs":"{{  $.Values.ObjectStorage.S3.metadataPolicy.authTTLMs }}",
                      "namesRefreshMs":"{{  $.Values.ObjectStorage.S3.metadataPolicy.namesRefreshMs }}",
                      "datasetRefreshAfterMs":"{{  $.Values.ObjectStorage.S3.metadataPolicy.datasetRefreshAfterMs }}",
                      "datasetUpdateMode":"{{  $.Values.ObjectStorage.S3.metadataPolicy.datasetUpdateMode }}",
                      "deleteUnavailableDatasets":"{{  $.Values.ObjectStorage.S3.metadataPolicy.deleteUnavailableDatasets }}",
                      "autoPromoteDatasets":"{{  $.Values.ObjectStorage.S3.metadataPolicy.autoPromoteDatasets }}"
                    },
                    "accelerationActivePolicyType": "{{  $.Values.ObjectStorage.S3.accelerationActivePolicyType }}"         
                  }'
                  echo $payload
                  response2=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d "$payload" "{{$.Values.dremioUrl}}:{{$.Values.coordinator.web.port}}/api/v3/catalog")
                  echo $response2
                  
                  payload='{
                    "entityType": "{{ $.Values.Database.POSTGRES.entityType }}",
                    "config": {
                      "authenticationType": "{{ $.Values.Database.POSTGRES.config.authenticationType }}",
                      "username": "{{ $.Values.Database.POSTGRES.config.username }}",
                      "password": "{{ $.Values.Database.POSTGRES.config.password }}",
                      "hostname": "{{ $.Values.Database.POSTGRES.config.hostname }}",
                      "port": "{{ $.Values.Database.POSTGRES.config.port }}",
                      "databaseName": "{{ $.Values.Database.POSTGRES.config.databaseName }}",
                      "useSsl": "{{ $.Values.Database.POSTGRES.config.useSsl }}",
                      "fetchSize": "{{ $.Values.Database.POSTGRES.config.fetchSize }}",
                      "maxIdleConns": "{{ $.Values.Database.POSTGRES.config.maxIdleConns }}",
                      "idleTimeSec": "{{ $.Values.Database.POSTGRES.config.idleTimeSec }}",
                      "encryptionValidationMode": "{{ $.Values.Database.POSTGRES.config.encryptionValidationMode }}",
                      "propertyList": [
                        {
                          "name": "connect_timeout",
                          "value": "10&application_name=myapp"
                        }
                      ]
                    },
                    "type": "POSTGRES",
                    "name": "{{ $.Values.Database.POSTGRES.name }}",
                    "metadataPolicy":{
                      "authTTLMs":"{{  $.Values.Database.POSTGRES.metadataPolicy.authTTLMs }}",
                      "namesRefreshMs":"{{  $.Values.Database.POSTGRES.metadataPolicy.namesRefreshMs }}",
                      "datasetRefreshAfterMs":"{{  $.Values.Database.POSTGRES.metadataPolicy.datasetRefreshAfterMs }}",
                      "datasetUpdateMode":"{{  $.Values.Database.POSTGRES.metadataPolicy.datasetUpdateMode }}",
                      "deleteUnavailableDatasets":"{{  $.Values.Database.POSTGRES.metadataPolicy.deleteUnavailableDatasets }}",
                      "autoPromoteDatasets":"{{  $.Values.Database.POSTGRES.metadataPolicy.autoPromoteDatasets }}"
                    },
                    "accelerationActivePolicyType": "{{  $.Values.Database.POSTGRES.accelerationActivePolicyType }}"         
                  }'

                  echo $payload
                  response3=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d "$payload" "{{$.Values.dremioUrl}}:{{$.Values.coordinator.web.port}}/api/v3/catalog")
                  echo $response3
                  
                  
                  payload='{
                    "entityType": "{{ $.Values.Catalog.Nessie.entityType }}",
                    "config": {
                        "nessieEndpoint": "{{$.Values.Catalog.Nessie.config.nessieEndpoint}}",
                        "nessieAuthType": "{{$.Values.Catalog.Nessie.config.nessieAuthType}}",
                        "asyncEnabled": {{$.Values.Catalog.Nessie.config.asyncEnabled}},
                        "isCachingEnabled": {{$.Values.Catalog.Nessie.config.isCachingEnabled}},
                        "maxCacheSpacePct": {{$.Values.Catalog.Nessie.config.maxCacheSpacePct}},
                        "credentialType": "{{$.Values.Catalog.Nessie.config.credentialType}}",
                        "awsAccessKey": "{{$.Values.Catalog.Nessie.config.awsAccessKey}}",
                        "awsAccessSecret": "{{$.Values.Catalog.Nessie.config.awsAccessSecret}}",
                        "awsRootPath": "{{$.Values.Catalog.Nessie.config.awsRootPath}}",
                        "propertyList": [
                        {
                            "name": "fs.s3a.path.style.access",
                            "value": "true"
                        },
                        {
                            "name": "fs.s3a.endpoint",
                            "value": "{{$.Values.Catalog.Nessie.endpoint}}"
                        },
                        {
                            "name": "dremio.s3.compat",
                            "value": "true"
                        }
                        ],
                        "secure": {{$.Values.Catalog.Nessie.config.secure}}
                    },
                    "type": "NESSIE",
                    "name": "{{ $.Values.Catalog.Nessie.name }}",
                    "metadataPolicy":{
                      "authTTLMs":"{{  $.Values.Catalog.Nessie.metadataPolicy.authTTLMs }}",
                      "namesRefreshMs":"{{  $.Values.Catalog.Nessie.metadataPolicy.namesRefreshMs }}",
                      "datasetRefreshAfterMs":"{{  $.Values.Catalog.Nessie.metadataPolicy.datasetRefreshAfterMs }}",
                      "datasetUpdateMode":"{{  $.Values.Catalog.Nessie.metadataPolicy.datasetUpdateMode }}",
                      "deleteUnavailableDatasets":"{{  $.Values.Catalog.Nessie.metadataPolicy.deleteUnavailableDatasets }}",
                      "autoPromoteDatasets":"{{  $.Values.Catalog.Nessie.metadataPolicy.autoPromoteDatasets }}"
                    },
                    "accelerationActivePolicyType": "{{  $.Values.Catalog.Nessie.accelerationActivePolicyType }}"      
                  }'

                  echo $payload
                  response4=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d "$payload" "{{$.Values.dremioUrl}}:{{$.Values.coordinator.web.port}}/api/v3/catalog")
                  echo $response4
                  
                  break 
              else
                  echo "Website is not accessible (HTTP $response)"
              fi

              # Sleep for the specified delay
              sleep $delay
          done



  backoffLimit: 0


