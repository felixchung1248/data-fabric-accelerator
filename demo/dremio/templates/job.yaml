apiVersion: batch/v1
kind: Job
metadata:
  name: my-job
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: my-container
        image: dataopennesscommunity/demo-golden:latest

        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "start"


          # Number of times to check the website
          iterations=20

          # Delay between each check (in seconds)
          delay=10

          # Loop for the specified number of iterations
          for i in $(seq 1 $iterations)
          do
              # Perform the curl request and store the response
              response=$(curl -s -w '%{http_code}\n' '{{$.Values.prodUrl}}:{{$.Values.coordinator.web.port}}/apiv2/login')

              # Check the response code
              if [ "$response" -eq 401 ]; then
                  echo "Website is accessible "
                  response1=$(curl -X POST -H 'Content-Type: application/json' -d '{"userName":"{{$.Values.userName}}","password":"{{$.Values.password}}"}' '{{$.Values.prodUrl}}:{{$.Values.coordinator.web.port}}/apiv2/login')
                  echo $response1
                  token=$(echo "$response1" | grep -oP '(?<="token":")[^"]+')
                  echo $token
                  url2='{{$.Values.prodUrl}}:{{$.Values.coordinator.web.port}}/api/v3/catalog'
                  echo $url2
                  payload='{
                    "entityType": "{{ $.Values.ObjectStorage.S3.entityType }}",
                    "config": {
                      "accessKey": "{{ $.Values.ObjectStorage.S3.config.accessKey }}",
                      "accessSecret": "{{ $.Values.ObjectStorage.S3.config.accessSecret }}",
                      "secure": false,
                      "enableAsync": true,
                      "compatibilityMode": true,
                      "isCachingEnabled": true,
                      "maxCacheSpacePct": "100",
                      "requesterPays": false,
                      "enableFileStatusCheck": true,
                      "defaultCtasFormat": "ICEBERG",
                      "isPartitionInferenceEnabled": false,
                      "whitelistedBuckets": ["{{ $.Values.ObjectStorage.S3.config.whitelistedBuckets }}"],
                      "propertyList": [
                          { "name": "fs.s3a.endpoint", "value": "{{ $.Values.ObjectStorage.S3.config.propertyList.endpoint }}" },
                          { "name": "fs.s3a.path.style.access", "value": true },
                          { "name": "dremio.s3.compat", "value": true },
                          { "name": "fs.s3a.connection.ssl.enabled", "value": false }
                      ],
                      "rootPath": "{{ $.Values.ObjectStorage.S3.config.rootPath }}"
                    },
                    "type": "S3",
                    "name": "{{ $.Values.ObjectStorage.S3.name }}",
                    "metadataPolicy":{
                      "authTTLMs":"{{  $.Values.ObjectStorage.S3.metadataPolicy.authTTLMs }}",
                      "namesRefreshMs":"{{  $.Values.ObjectStorage.S3.metadataPolicy.namesRefreshMs }}",
                      "datasetRefreshAfterMs":"{{  $.Values.ObjectStorage.S3.metadataPolicy.datasetRefreshAfterMs }}",
                      "datasetUpdateMode":"{{  $.Values.ObjectStorage.S3.metadataPolicy.datasetUpdateMode }}",
                      "deleteUnavailableDatasets":"{{  $.Values.ObjectStorage.S3.metadataPolicy.deleteUnavailableDatasets }}",
                      "autoPromoteDatasets":"{{  $.Values.ObjectStorage.S3.metadataPolicy.autoPromoteDatasets }}"
                    },
                    "accelerationActivePolicyType": "{{  $.Values.ObjectStorage.S3.accelerationActivePolicyType }}"         
                  }'
                  echo $payload
                  response2=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d "$payload" "{{$.Values.prodUrl}}:{{$.Values.coordinator.web.port}}/api/v3/catalog")
                  echo $response2

                  break 
              else
                  echo "Website is not accessible (HTTP $response)"
              fi

              # Sleep for the specified delay
              sleep $delay
          done



  backoffLimit: 0


